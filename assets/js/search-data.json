{
  
    
        "post0": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://jsqihui.github.io/life/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post1": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://jsqihui.github.io/life/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "博弈论8",
            "content": "关于这课的一些想法：这节课讲了一个模型，这个模型有稳定的均衡（strict Nash Equilibrium），不稳定的NE。这让我联想到自然届的一些东西，在物理学里面同样也有稳定的平衡比如说一个小球落在碗里面。不稳定的平衡，比如说一个猫静立在钢丝上。但是还有很多其它类型的平衡，动态平衡比如说溪流，比如说大坝水库的水平面，应该还有更多类型的平衡，一时间也想不出来。同样映射到社会中，也有同样的平衡存在，稳定的平衡类似于一个幸福的家庭，不稳定的平衡类似于对峙的两军，一触即发，动态的平衡比如说公司的裁员和招聘（保持公司总体员工人数不变）。 . 说了这么多平衡或均衡让人感到有点疑惑，平衡本身到底如何定义。 . wikipedia上的一句话：Equilibrium is the condition of a system in which competing influences are balanced. . http://en.wikipedia.org/wiki/Equilibrium . 要我来翻译的话还真不好翻，自己意会一下好了。 . wiki上给出了许多均衡的例子，大到星球和生态系统，小到化学反应之类。那么涉及了生物物理化学经济社会等等各个方面。其实如果是这样的话，那么各个领域的平衡就可以统一起来了，大道相通嘛，把生物的平衡用于公司管理，物理平衡来预测生态系统，不知道是否每个领域的平衡都有一些理论存在，如果是存在的话，大可搞一个平衡学之类的学科，来专门研究平衡这个东西。 . 其实仔细的想一想，这个应该是属于系统学的一部分，但是系统学实在太大了，尤其是复杂系统的平衡性，简直让人无法下手，或者说复杂系统往往是混沌的，没有平衡性。或许把各学科的提取出来大家混用一下更能出成果吧，大家天天都埋头于自己的学科内，敝帚自珍，今天你调出个程序，明天你做了反应，后天他医好了个病人，实在无趣，离世界的本质越来越远，大道至简，可是要得简何易啊。 . 恩，多插一句，不知道可不可以用熵的概念来重新定一下平衡，因为一个学科的发展总要一些基础的理论，相对论有两条公理，欧式几何有五条。哈哈，万一以后我能把平衡学发展为一门单独的学科，此文就可定下第一条定义，平衡性 = 负熵，哈哈哈开个玩笑，路漫漫兮，我还是想学医。 . 虽然是玩笑之言吧，但是很多识之士还已经把大量的物理学，生物学定律用于社会学和经济学了。不知看本篇日志有学经济的没有，不知是否听过Econophysics（物理经济学），没听过的话，只能说您out了。。。 . btw，我真的是学计算机的。。。。哈哈哈。。。 . 好了，闲扯结束，进入正题，其实有时候闲扯比正题更有意思，闲扯的是我的思想，正题却是记录别人的东西，实在无趣。 . —————————————————————————————————————————————- . 模型1 竞选者模型 . 模型描述： . 1.参选人数不固定 . 2.参选者不能改变自己的立场，也就是说你是温和左派，大家都知道，你是极端右派，大家也都明白。 . 3.每一个投票人同时也是潜在的参选人。 . 玩家：每一个投票者 . 策略：参选或者不参选。当然无论玩家参不参加选举，他都将把票投给离自己立场最近的参选人。 . 收益： . 参选且获胜，收益B=2C . 参选费用，C . 对获胜者的不满意度 - | X-Y | ，也就是说如果你是极左，然后获胜者是极右，那么您就等着吃瘪吧。 | . 用一条线来说明一下： . -极左———偏左———–温和左派—-中间派—-温和右派———–偏右———极右- . 计算就免了，直接说结果： . 纳什均衡1： 中间派参选，其它人都不选。 . 纳什均衡2： 温和左派和温和右派同时有一个人参选，且对称，其它人都不参选。 . 注意均衡2有个限制，就是朝两边散开的时候，有一定范围，超过了这个范围，中间派就可以出来参选且获胜，就不再是均衡了。说的很模糊，懒得写，想弄清楚的自己去看第八课的视频好了。 . 然后总结了几个结论： . 1.可能有多个NE，且不一定在中间（不同于第二课的例子） . 2.NE时，一个人的进入会导致相反方向人获胜。比如说，温和左和温和右平衡了，你是偏左如果进入选举的话，那么获胜的就是温和右派。 . 3.guess and check could be effective，这条让我很不爽，就是说大家以后找均衡看看就好了，猜猜然后检测一下，不用算了。。。不过效率高也是真的。也许也真的存在就算列出数学公式也没法解的情况吧。 . 模型2 location model . 玩家：两类人，高个子和矮个子 各100人 . 策略：选择东村或者西村居住，东村西村的容量各为100人。如果选择超过容量，比如说有150人选了东村，你在150中的话，那么你有2/3的概率住进东村。 . 收益：这个描述起来小麻烦，我画个图好了 . 简单说呢，你希望住在一个完全混合的村子里，不然的话，你更倾向和你的同类住在一起。 . 通过那个该死而且有效的guess and check方法呢，有三个NE（纳什均衡） . NE1：100个高个住东村，100个矮个住西村。反之亦然。 . NE2: 50个高个，50个矮个住东村，西村亦然。 . NE3：所有人都选择东村，或者选择西村。靠系统规则来randomize。 . 明显NE1是strict NE，NE2是weak NE，也就是前文说的不稳定平衡。NE3是下几节课要考虑的内容（策略组）。 . 而NE1就是有名的segregation，种族隔离。 . 课上完了，扯还没有完。 . 据说一个叫谢林的通过研究这个得出结论，说群体表现出来的特性并非个人所愿。竟然还获得了诺贝尔奖。我勒个去，这不就是复杂系统里的涌现的概念吗？emerge。竟然这就可以？？看来复杂系统还是大有搞头的。。。 .",
            "url": "https://jsqihui.github.io/life/%E5%8D%9A%E5%BC%88%E8%AE%BA/2011/04/21/blog-1.html",
            "relUrl": "/%E5%8D%9A%E5%BC%88%E8%AE%BA/2011/04/21/blog-1.html",
            "date": " • Apr 21, 2011"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://jsqihui.github.io/life/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://jsqihui.github.io/life/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}